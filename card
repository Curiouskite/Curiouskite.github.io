#!/bin/bash

# Auto-generate a digital corkboard from HTML files in current directory

# --- ANSI Color Codes ---
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# --- Initial Setup ---
clear
echo "=============================="
echo "  Auto Corkboard Generator 🚀"
echo "=============================="

# Get output filename
read -p "Enter output filename (default: index.html): " OUTPUT_FILE
OUTPUT_FILE=${OUTPUT_FILE:-index.html}

# Add .html extension if not provided
if [[ "$OUTPUT_FILE" != *.html ]];
then
    OUTPUT_FILE="${OUTPUT_FILE}.html"
fi

echo -e "\n${BLUE}Scanning current directory for HTML files...${NC}"

# Find all HTML files in current directory only (not subdirectories)
HTML_FILES=($(find . -maxdepth 1 -name "*.html" -type f | sed 's|^\./||' | sort))

if [ ${#HTML_FILES[@]} -eq 0 ];
then
    echo -e "${RED}No HTML files found in current directory!${NC}"
    exit 1
fi

echo -e "${GREEN}Found ${#HTML_FILES[@]} HTML file(s):${NC}"
for file in "${HTML_FILES[@]}";
do
    echo -e "  • $file"
done

echo ""
read -p "Continue generating corkboard? (y/n): " confirm
if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
    echo "Operation cancelled."
exit 0
fi

# --- Generate HTML Content ---
generate_corkboard_html() {
    cat << 'HTML_START'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>File Search - Digital Corkboard</title>
    
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Kalam:wght@400;700&family=Inter:wght@400;500;600&display=swap" rel="stylesheet">

    <style>
        :root {
            /* --- Light Theme (Default) --- */
           
             --corkboard-bg: #D2B48C;
            --corkboard-texture: url("data:image/svg+xml,%3Csvg width='80' height='80' viewBox='0 0 80 80' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23C7A87D' fill-opacity='0.4'%3E%3Cpath d='M50 50c0-5.523 4.477-10 10-10s10 4.477 10 10-4.477 10-10 10c-5.523 0-10-4.477-10-10zm10 2c-1.105 0-2-.895-2-2s.895-2 2-2 2 .895 2 2-.895 2-2 2zM30 30c0-5.523 4.477-10 10-10s10 4.477 10 10-4.477 10-10 10-10-4.477-10-10zm10 2c-1.105 0-2-.895-2-2s.895-2 2-2 2 .895 2 2-.895 2-2 2zM10 10c0-5.523 4.477-10 10-10s10 4.477 10 10-4.477 10-10 10S10 15.523 10 10zm10 2c-1.105 0-2-.895-2-2s.895-2 2-2 2 .895 2 2-.895 2-2 2z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
 --paper-bg: #FEFBF2; 
            --text-color: #4A4A4A;
            --subtle-text-color: #A0937D;
            --shadow-color: rgba(0,0,0,0.15);
            --pin-color: #E53E3E;
            --slider-bg: rgba(0, 0, 0, 0.1);
            --icon-color: #4A4A4A;
 --search-focus-shadow: rgba(254, 251, 242, 0.7);
        }

        /* --- Dark Theme Variables --- */
        body.dark-theme {
            --corkboard-bg: #3D352A;
 --corkboard-texture: url("data:image/svg+xml,%3Csvg width='80' height='80' viewBox='0 0 80 80' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23574d3c' fill-opacity='0.4'%3E%3Cpath d='M50 50c0-5.523 4.477-10 10-10s10 4.477 10 10-4.477 10-10 10c-5.523 0-10-4.477-10-10zm10 2c-1.105 0-2-.895-2-2s.895-2 2-2 2 .895 2 2-.895 2-2 2zM30 30c0-5.523 4.477-10 10-10s10 4.477 10 10-4.477 10-10 10-10-4.477-10-10zm10 2c-1.105 0-2-.895-2-2s.895-2 2-2 2 .895 2 2-.895 2-2 2zM10 10c0-5.523 4.477-10 10-10s10 4.477 10 10-4.477 10-10 10S10 15.523 10 10zm10 2c-1.105 0-2-.895-2-2s.895-2 2-2 2 .895 2 2-.895 2-2 2z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
 --paper-bg: #282A36;
            --text-color: #F8F8F2;
            --subtle-text-color: #94A3B8;
            --shadow-color: rgba(0,0,0,0.4);
            --pin-color: #FF5555;
            --slider-bg: rgba(255, 255, 255, 0.1);
            --icon-color: #F8F8F2;
 --search-focus-shadow: rgba(74, 144, 226, 0.4);
        }

        html { scroll-behavior: smooth;
 }

        body {
            font-family: 'Inter', sans-serif;
 background-color: var(--corkboard-bg);
            background-image: var(--corkboard-texture);
            margin: 0;
            padding: 24px;
            transition: background-color 0.3s ease;
 }

        .top-bar {
            position: fixed;
 top: 24px;
            left: 24px;
            right: 24px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            z-index: 50;
            pointer-events: none;
 }
        .icon-button {
            pointer-events: all;
 background-color: var(--paper-bg);
            border: none;
            width: 44px;
            height: 44px;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
 box-shadow: 0 2px 10px var(--shadow-color);
            transition: all 0.2s ease;
            color: var(--icon-color);
 }
        .icon-button:hover {
            transform: translateY(-2px);
 box-shadow: 0 4px 12px var(--shadow-color);
        }
        .icon-button svg { width: 22px; height: 22px;
 }

        #theme-switcher .moon-icon { display: none;
 }
        .dark-theme #theme-switcher .sun-icon { display: none;
 }
        .dark-theme #theme-switcher .moon-icon { display: block;
 }
        
        .control-bar {
            padding: 0 16px;
 margin-top: 60px;
            margin-bottom: 32px;
        }

        #searchInput {
            font-family: 'Inter', sans-serif;
 font-size: 1rem;
            width: 100%;
            max-width: 450px;
            display: block;
            margin: 0 auto;
            padding: 14px 24px;
            border: none;
            border-radius: 50px;
            background-color: var(--paper-bg);
 color: var(--text-color);
            box-shadow: 0 4px 15px var(--shadow-color);
            -webkit-appearance: none;
            transition: background-color 0.3s ease, color 0.3s ease;
 }
        
        #searchInput:focus {
            outline: none;
 box-shadow: 0 0 0 4px var(--search-focus-shadow);
        }

        .notes-grid {
            display: grid;
 grid-template-columns: 1fr;
            gap: 24px;
            max-width: 1200px;
            margin: 0 auto;
            padding-right: 30px;
 }

        .note {
            background-color: var(--paper-bg);
 box-shadow: 3px 3px 10px var(--shadow-color);
            position: relative;
            aspect-ratio: 5 / 4;
            will-change: transform, opacity;
 transition: transform 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94), 
                        box-shadow 0.2s ease-out, 
                        opacity 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94), 
                        background-color 0.3s ease;
 }
        
        .note::before {
            content: '';
 position: absolute; top: 12px; left: 50%;
            transform: translateX(-50%); width: 12px; height: 12px;
            background-color: var(--pin-color); border-radius: 50%;
 box-shadow: 1px 1px 3px rgba(0,0,0,0.3); z-index: 10;
        }
        
        .note a {
            text-decoration: none;
 color: var(--text-color); display: flex; flex-direction: column;
            justify-content: center; align-items: center; text-align: center;
            width: 100%; height: 100%; padding: 20px; box-sizing: border-box;
 }
        
        .note:hover {
            transform: translateY(-5px) scale(1.03);
 box-shadow: 6px 6px 20px var(--shadow-color);
        }
        
        .note.hidden { display: none !important;
 }
        
        .note-title {
            font-family: 'Kalam', cursive;
 font-size: clamp(1.25rem, 5vw, 1.75rem);
            font-weight: 700; margin-bottom: 10px;
        }

        .note-filename {
            font-size: clamp(0.8rem, 2.5vw, 0.9rem);
 color: var(--subtle-text-color);
        }

        .fast-scroll-slider {
            position: fixed;
 top: 50%; right: 5px;
            transform: translateY(-50%); display: flex; flex-direction: column;
            align-items: center; background-color: var(--slider-bg);
            border-radius: 10px; padding: 8px 4px;
 z-index: 30;
            backdrop-filter: blur(2px); -webkit-backdrop-filter: blur(2px);
        }

        .fast-scroll-slider a {
            text-decoration: none;
 color: var(--text-color);
            font-size: 11px; font-weight: 600; padding: 2px;
            transition: all 0.2s; border-radius: 4px;
            width: 16px; text-align: center;
 }
        
        .fast-scroll-slider a.active,
        .fast-scroll-slider a:hover {
            background-color: var(--paper-bg);
 color: var(--text-color);
            transform: scale(1.2);
        }

        @media (min-width: 640px) {
            .notes-grid {
                grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
 padding-right: 40px;
            }
            .fast-scroll-slider { right: 10px;
 }
            .note:nth-of-type(4n+1) { transform: rotate(-1.5deg);
 }
            .note:nth-of-type(4n+2) { transform: rotate(1deg);
 }
            .note:nth-of-type(4n+3) { transform: rotate(2deg);
 }
            .note:nth-of-type(4n+4) { transform: rotate(-1deg);
 }
            .note:hover { transform: translateY(-8px) scale(1.05) rotate(0deg); z-index: 10;
 }
        }

        .generated-info {
            position: fixed;
 bottom: 20px;
            left: 20px;
            background: var(--paper-bg);
            color: var(--subtle-text-color);
            padding: 8px 12px;
            border-radius: 8px;
            font-size: 0.8rem;
            z-index: 40;
 box-shadow: 0 2px 8px var(--shadow-color);
        }
    </style>
</head>
<body>
    
    <div class="top-bar">
        <a href="https://curiouskite.github.io/" class="icon-button" aria-label="Home">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"/></svg>
        </a>
        <button id="theme-switcher" class="icon-button" aria-label="Toggle theme">
            <svg class="sun-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 
 5 5-2.24 5-5-2.24-5-5-5zM2 13h2c.55 0 1-.45 1-1s-.45-1-1-1H2c-.55 0-1 .45-1 1s.45 1 1 1zm18 0h2c.55 0 1-.45 1-1s-.45-1-1-1h-2c-.55 0-1 .45-1 1s.45 1 1 1zM11 2v2c0 .55.45 1 1 1s1-.45 1-1V2c0-.55-.45-1-1-1s-1 .45-1 1zm0 18v2c0 .55.45 1 1 1s1-.45 1-1v-2c0-.55-.45-1-1-1s-1 .45-1 1zM5.99 4.58c-.39-.39-1.02-.39-1.41 0-.39.39-.39 1.02 0 1.41l1.06 1.06c.39.39 1.02.39 1.41 0s.39-1.02 0-1.41L5.99 4.58zm12.02 12.02c-.39-.39-1.02-.39-1.41 0-.39.39-.39 1.02 0 1.41l1.06 1.06c.39.39 1.02.39 1.41 0 .39-.39.39-1.02 0-1.41l-1.06-1.06zM18.01 5.99c.39-.39.39-1.02 0-1.41-.39-.39-1.02-.39-1.41 0l-1.06 1.06c-.39.39-.39 1.02 0 1.41s1.02.39 1.41 0l1.06-1.06z"/></svg>
            <svg class="moon-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M12 3c-4.97 0-9 4.03-9 9s4.03 9 9 9c.83 0 1.62-.14 2.37-.38-.43-.9-.68-1.92-.68-3.02 
 0-3.52 2.76-6.44 6.32-6.62C19.22 5.61 15.86 3 12 3z"/></svg>
        </button>
    </div>

    <header class="control-bar">
        <input type="search" id="searchInput" placeholder="Find a file...">
    </header>

    <main class="notes-grid" id="fileList">
HTML_START

    # Generate note entries for each HTML file
    for file in "${HTML_FILES[@]}";
do
        # Skip the output file itself to avoid circular reference
        if [ "$file" = "$OUTPUT_FILE" ];
then
            continue
        fi
        
        # Get filename without extension for title
        filename_no_ext=$(basename "$file" .html)
        
        # Convert filename to a readable title (replace underscores/hyphens with spaces, capitalize)
        readable_title=$(echo "$filename_no_ext" | sed 's/[-_]/ /g' | awk '{for(i=1;i<=NF;i++){$i=toupper(substr($i,1,1)) substr($i,2)}}1')
    
     
        # If title is empty or just spaces, use the filename
        if [ -z "$(echo "$readable_title" | xargs)" ];
then
            readable_title="$filename_no_ext"
        fi
        
        # Escape HTML special characters
        escaped_title=$(echo "$readable_title" | sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g; s/"/\&quot;/g; s/'"'"'/\&#39;/g')
        escaped_filename=$(echo "$file" | sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g; s/"/\&quot;/g')
        
        echo "        <div class=\"note\"> <a href=\"$escaped_filename\"><span 
 class=\"note-title\">$escaped_title</span><span class=\"note-filename\">$escaped_filename</span></a></div>"
    done

    cat << 'HTML_END'
    </main>
    
    <div class="fast-scroll-slider" id="fastScrollSlider"></div>

    <div class="generated-info">
        Auto-generated corkboard
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const body = document.body;
            const searchInput = document.getElementById('searchInput');
            
 const notesGrid = document.getElementById('fileList');
            const fastScrollSlider = document.getElementById('fastScrollSlider');
 const themeSwitcher = document.getElementById('theme-switcher');
            let activeLetterFilter = null;

            // --- THEME SWITCHER LOGIC ---
            const savedTheme = localStorage.getItem('theme');
 if (savedTheme) {
                body.classList.add(savedTheme + '-theme');
 } else {
                body.classList.add('light-theme');
 }

            themeSwitcher.addEventListener('click', () => {
                if (body.classList.contains('dark-theme')) {
                    body.classList.remove('dark-theme');
                    body.classList.add('light-theme');
                    localStorage.setItem('theme', 'light');
      
           } else {
                    body.classList.remove('light-theme');
                    body.classList.add('dark-theme');
                    localStorage.setItem('theme', 'dark');
                }
           
     });

            // --- NOTE SETUP & SORTING ---
            const notesArray = Array.from(document.querySelectorAll('#fileList .note'));
 notesArray.sort((a, b) => a.querySelector('.note-title').textContent.trim().localeCompare(b.querySelector('.note-title').textContent.trim()));
            
            notesGrid.innerHTML = '';
            notesArray.forEach(note => notesGrid.appendChild(note));
            
            const sortedNotes = document.querySelectorAll('#fileList .note');
 const colorPaletteLight = ['#FEFBF2', '#FFFACD', '#C1E1C1', '#BDE0FE', '#FFD1DC'];
            const colorPaletteDark = ['#282A36', '#44475A', '#504945', '#3C3836', '#427777'];
 function applyColors() {
                const isDark = body.classList.contains('dark-theme');
 const palette = isDark ? colorPaletteDark : colorPaletteLight;
                sortedNotes.forEach((note, index) => {
                    note.style.backgroundColor = palette[index % palette.length];
                    note.dataset.letter = note.querySelector('.note-title').textContent.trim().charAt(0).toUpperCase();
                });
 }
            applyColors();
            themeSwitcher.addEventListener('click', applyColors);
 // --- SLIDER & FILTER LOGIC ---
            const alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
 for (const letter of alphabet) {
                const letterLink = document.createElement('a');
 letterLink.href = '#'; letterLink.textContent = letter;
                letterLink.dataset.targetLetter = letter;
                fastScrollSlider.appendChild(letterLink);
 }
            
            function applyFilters() {
                const searchQuery = searchInput.value.trim().toLowerCase();
 sortedNotes.forEach(note => {
                    const itemText = note.textContent.toLowerCase();
                    const noteLetter = note.dataset.letter;

                    const searchMatch = itemText.includes(searchQuery);
                    const letterMatch = !activeLetterFilter || noteLetter === activeLetterFilter;
  
                   
                    note.classList.toggle('hidden', !(searchMatch && letterMatch));
                });
 }

            fastScrollSlider.addEventListener('click', (e) => {
                if (e.target.tagName !== 'A') return;
                e.preventDefault();
                const targetLetter = e.target.dataset.targetLetter;
                searchInput.value = ''; 
           
      if (activeLetterFilter === targetLetter) {
                    activeLetterFilter = null;
                    e.target.classList.remove('active');
                } else {
                    activeLetterFilter = targetLetter;
         
            fastScrollSlider.querySelectorAll('a').forEach(a => a.classList.remove('active'));
                    e.target.classList.add('active');
                }
                applyFilters();
            });
 searchInput.addEventListener('input', () => {
                if (activeLetterFilter) {
                    activeLetterFilter = null;
                    fastScrollSlider.querySelectorAll('a').forEach(a => a.classList.remove('active'));
                }
                applyFilters();
   
          });
        });
 </script>

</body>
</html>
HTML_END
}

# --- Generate the HTML file ---
echo -e "\n${BLUE}Generating corkboard HTML...${NC}"

if generate_corkboard_html > "$OUTPUT_FILE";
then
    echo -e "${GREEN}✅ Success! Corkboard generated: $OUTPUT_FILE${NC}"
    echo -e "${BLUE}📁 Included ${#HTML_FILES[@]} HTML files${NC}"
    echo ""
    echo "Files included:"
    for file in "${HTML_FILES[@]}";
do
        if [ "$file" != "$OUTPUT_FILE" ];
then
            filename_no_ext=$(basename "$file" .html)
            readable_title=$(echo "$filename_no_ext" | sed 's/[-_]/ /g' | awk '{for(i=1;i<=NF;i++){$i=toupper(substr($i,1,1)) substr($i,2)}}1')
            echo -e "  • ${YELLOW}$readable_title${NC} → $file"
        fi
    done
    echo ""
    echo -e "${GREEN}🚀 Open $OUTPUT_FILE in your browser to view the corkboard!${NC}"
else
    echo -e "${RED}❌ Error: Failed to generate corkboard${NC}"
   
  exit 1
fi
